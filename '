#include <iostream>
#include <vector>
using namespace std;
class Solution {
public:
  void dfs(vector<vector<char>> &board, int i, int j, int m, int n) {
    if (i >= 0 && j >= 0 && i < m && j < n) {
      if (board[i][j] == 'O') {
        board[i][j] = '1';
        // now traverse the four directions
        if (i > 1)
          dfs(board, i - 1, j, m, n);
        if (j > 1)
          dfs(board, i, j - 1, m, n);
        if (i + 1 < m)
          dfs(board, i + 1, j, m, n);
        if (j + 1 < n)
          dfs(board, i, j + 1, m, n);
      }
    }
  }
  void solve(vector<vector<char>> &board) {
    int m = board.size();
    int n = board[0].size();
    // traverse through the boundary elements

    // traversing through m columns
    for (int j = 0; j < m; j++) {
      dfs(board, 0, j, m, n);
      if (n > 1) {
        dfs(board, n - 1, j, m, n);
      }
    }
    // traversing through n rows
    for (int j = 0; j < n; j++) {
      dfs(board, j, 0, m - 1, n - 1);
      if (m > 1) {
        dfs(board, j, m - 1, m, n);
      }
    }
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        if (board[i][j] == 'O') {
          board[i][j] = 'X';
        } else if (board[i][j] == '1') {
          board[i][j] = 'O';
        }
      }
    }
    for (auto &row : board) {
        for (auto &el : row) {
            std::cout<<el<<" ";
        }
    }
  }
};
int main() {
    vector<vector<char>>board{{'X','O','X','O','X','O'},{'O','X','O','X','O','X'},{'X','O','X','O','X','O'},{'O','X','O','X','O','X'}};
    Solution s;
    s.solve(board);

}

